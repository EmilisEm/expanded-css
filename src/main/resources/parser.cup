package cssParser;

import java_cup.runtime.*;
import java.util.List;
import parserUtils.ParseUtils;
import parserUtils.nonterminals.*;
import parserUtils.nonterminals.styleproperty.*;
import parserUtils.nonterminals.styleproperty.propertyvalue.ternary.*;
import parserUtils.nonterminals.styleproperty.propertyvalue.value.*;
import parserUtils.nonterminals.selector.*;
import parserUtils.nonterminals.Inheritance;

terminal COM, LBRACE, RBRACE, COL,
            QMK, RAROW, SCOL, IMPORTANT, CHILD_SELECTOR, OR, START_CON, END_CON, START_INH, END_INH;
terminal String CLASS, ID, TAG;
terminal String URL, SIZE, ATTRIBUTE, ATTRIBUTE_VALUE, FONT_FAMILY, FONT;
terminal String MEDIA, ORIENTATION, ORIENTATION_TYPE, SIZE_CON;

non terminal StyleSheet STYLE_SHEET;
non terminal Block BLOCK;
non terminal List<Block> BLOCK_LIST;
non terminal MediaBlock MEDIA_BLOCK;
non terminal List<MediaBlock> MEDIA_BLOCK_LIST;

non terminal CssSelector SELECTOR;
non terminal SelectorGroup SELECTOR_GROUP;
non terminal SelectorRelationshipType SELECTOR_RELATIONSHIP;

non terminal Inheritance INHERITANCE;
non terminal List<CssSelectorValue> INHERITANCE_LIST;
non terminal CssSelectorValue SELECTOR_VALUE;

non terminal StyleProperty STYLE_PROPERTY;
non terminal List<StyleProperty> STYLE_PROPERTY_LIST;
non terminal PropertyValue STYLE_PROPERTY_VALUE;
non terminal List<PropertyValue> STYLE_PROPERTY_VALUE_LIST;
non terminal List<PropertyValue> FONT_LIST;

non terminal Ternary TERNARY;
non terminal TernaryCondition CONDITION;

STYLE_SHEET ::= BLOCK_LIST:blocks MEDIA_BLOCK_LIST:media_blocks {: RESULT = new StyleSheet(blocks, media_blocks); :}
    ;

BLOCK_LIST ::= BLOCK_LIST:l BLOCK:block {: l.add(block); RESULT = l; :}
    | BLOCK:b {: RESULT = List.of(b); :}
    ;

MEDIA_BLOCK_LIST ::= MEDIA_BLOCK_LIST:l MEDIA_BLOCK:b {: l.add(b); RESULT = l; :}
    | MEDIA_BLOCK:b {: RESULT = List.of(b); :}
    ;

MEDIA_BLOCK ::= MEDIA:type LBRACE BLOCK_LIST:blocks RBRACE {: RESULT = new MediaBlock(ParseUtils.parseMediaType(type), blocks); :}
    | MEDIA LBRACE error:e RBRACE {: parser.report_error("Error parsing media block", e); :}
    ;

BLOCK ::= SELECTOR:selector LBRACE STYLE_PROPERTY_LIST:style_props RBRACE {: RESULT = new Block(selector, style_props); :}
    | error:e RBRACE {: parser.report_error("Error parsing selector", e); :}
    ;

SELECTOR ::= SELECTOR_GROUP:selector_gr INHERITANCE:inh IMPORTANT {: RESULT = new CssSelector(selector_gr, inh, true); :}
    | SELECTOR_GROUP:selector_gr INHERITANCE:inh {: RESULT = new CssSelector(selector_gr, inh, false); :}
    | SELECTOR_GROUP:selector_gr IMPORTANT {: RESULT = new CssSelector(selector_gr, null, true); :}
    | SELECTOR_GROUP:selector_gr {: RESULT = new CssSelector(selector_gr, null, false); :}
    ;

SELECTOR_VALUE ::= CLASS:s {: RESULT = new CssSelectorValue(s, CssSelectorType.CLASS); :}
    | ID:s {: RESULT = new CssSelectorValue(s, CssSelectorType.ID); :}
    | TAG:s {: RESULT = new CssSelectorValue(s, CssSelectorType.TAG); :}
    ;

SELECTOR_RELATIONSHIP ::= RAROW {: RESULT = SelectorRelationshipType.DIR_DESCENDENT; :}
    | CHILD_SELECTOR {: RESULT = SelectorRelationshipType.DESCENDENT; :}
    ;

SELECTOR_GROUP ::= SELECTOR_GROUP:g SELECTOR_RELATIONSHIP:r SELECTOR_VALUE:v {: g.getSelectors().add(v); g.getRelationshipTypes().add(r); RESULT = g; :}
    | SELECTOR_VALUE:v {: RESULT = new SelectorGroup(List.of(v), List.of()); :}
    ;

INHERITANCE ::= START_INH INHERITANCE_LIST:l END_INH {: RESULT = new Inheritance(l); :}
    | error:e END_INH {: parser.report_error("Error parsing inheritance", e); :}
    ;

INHERITANCE_LIST ::= INHERITANCE_LIST:l COM SELECTOR_VALUE:v {: l.add(v); RESULT = l; :}
    | SELECTOR_VALUE:s {: RESULT = List.of(s); :}
    ;

STYLE_PROPERTY_LIST ::= STYLE_PROPERTY_LIST:l STYLE_PROPERTY:v SCOL {: l.add(v); RESULT = l; :}
    | STYLE_PROPERTY:v SCOL {: RESULT = List.of(v); :}
    | error:e SCOL {: parser.report_error("Error parsing properties", e); :}
    ;

STYLE_PROPERTY ::= ATTRIBUTE:a COL STYLE_PROPERTY_VALUE_LIST:l {: RESULT = new StyleProperty(a, l); :}
    | ATTRIBUTE:a COL TERNARY:v {: RESULT = new StyleProperty(a, List.of(v)); :}
    | FONT_FAMILY:a COL FONT_LIST:v {: RESULT = new StyleProperty(a, v); :}
    | FONT_FAMILY:a COL TERNARY:v {: RESULT = new StyleProperty(a, List.of(v)); :}
    ;

FONT_LIST ::= FONT_LIST:l FONT:f {: l.add(new StringPropertyValue(f)); RESULT = l; :}
    | FONT:f {: RESULT = List.of(new StringPropertyValue(f)); :}
    ;

STYLE_PROPERTY_VALUE_LIST ::= STYLE_PROPERTY_VALUE_LIST:l STYLE_PROPERTY_VALUE:v {: l.add(v); RESULT = l; :}
    | STYLE_PROPERTY_VALUE:v {: RESULT = List.of(v); :}
    ;

STYLE_PROPERTY_VALUE ::= URL:v {: RESULT = new UrlPropertyValue(v); :}
    | SIZE:v {: RESULT = ParseUtils.parseSizeValue(v); :}
    | ATTRIBUTE_VALUE:v {: RESULT = new StringPropertyValue(v); :}
    ;

TERNARY ::= START_CON CONDITION:c QMK STYLE_PROPERTY_VALUE_LIST:r OR STYLE_PROPERTY_VALUE_LIST:l END_CON {: RESULT = new Ternary(c, r, l); :}
    | error:e END_CON {: parser.report_error("Error parsing ternary", e); :}
    ;

CONDITION ::= ORIENTATION:o COL ORIENTATION_TYPE:t {: RESULT = new TernaryCondition(ParseUtils.getOrientation(o), t); :}
    | SIZE_CON:s COL SIZE:v {: RESULT = new TernaryCondition(ParseUtils.getSizeCondition(s), v); :}
    ;
